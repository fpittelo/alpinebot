name: Deploy dev

on:
  push:
    branches:
      - dev
      - qa
      - main

permissions:
  id-token: write  # Required for OIDC authentication
  contents: read   # Default permission for accessing the repo

jobs:
  # Step 1: Bootstrap Backend Resources (if not already done)
  backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }} # must match the federated credential "based on selection" \
    # and match Github Action Secrets name
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment based on branch
        id: setenv
        run: |
          BRANCH_NAME=$(echo "${{ github.ref }}" | cut -d'/' -f3)
          if [[ "$BRANCH_NAME" == "dev" ]]; then
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "qa" ]]; then
            echo "ENVIRONMENT=qa" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "main" ]]; then
            echo "ENVIRONMENT=main" >> $GITHUB_ENV
          fi

      - name: Login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}             # App Registration client ID
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}             # Tenant ID
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} # Subscription ID
          allow-no-subscriptions: false
          enable-AzPSSession: false

      - name: Set Azure Subscription
        run:  |
          echo "Setting Azure Subscription to: ${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Output Active Azure Subscription Details
        run: |
          echo "Currently active Azure subscription:"
          az account show --output table
      
      - name: Create backend resources
        run: |
          # Define variables for the backend resources
          az_backend_rg_name="${{ env.ENVIRONMENT }}-bkd-alpinebot"
          az_backend_sa_name="${{ env.ENVIRONMENT }}bkdalpinebotsa"
          az_backend_container_name="${{ env.ENVIRONMENT }}-bkd-alpinebot-co"
          az_location="SwitzerlandNorth"

          # Re-set subscription context before resource group creation as additional safeguard
          echo "Setting Azure Subscription to: ${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          echo "Currently active Azure subscription:"
          az account show --output table

          # Create resource group if it doesn't exist
          az group create --name $az_backend_rg_name --location $az_location

          # Create storage account if it doesn't exist
          az storage account create \
            --name $az_backend_sa_name \
            --resource-group $az_backend_rg_name \
            --location $az_location \
            --sku Standard_LRS
          
          # Adding a small delay to ensure the storage account is fully provisioned
          sleep 30

          # Get the storage account key
          STORAGE_KEY=$(az storage account keys list --resource-group $az_backend_rg_name --account-name $az_backend_sa_name --query '[0].value' -o tsv)

          # Create storage container if it doesn't exist
          az storage container create \
            --name $az_backend_container_name \
            --account-name $az_backend_sa_name \
            --account-key $STORAGE_KEY

  # Step 2: Main Terraform Deployment
  deploy:
    name: Deploy Infra
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }} #must match the federated credential "based on selection" \
    # and match Github Action Secrets name
    needs: backend # Ensures this runs after the bootstrap job
  
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login To Azure Using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}             # App Registration client ID
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}             # Tenant ID
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} # Subscription ID
          allow-no-subscriptions: false
          enable-AzPSSession: false

      - name: Set Terraform Environment Variables
        run: |
          echo "TF_VAR_az_client_id=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_az_tenant_id=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_az_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_az_container_name=${{ env.ENVIRONMENT }}-bkd-alpinebot-co" >> $GITHUB_ENV  # Replace with actual container name if different
          echo "TF_VAR_sp_object_id=${{ secrets.AZURE_SP_OBJECT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_az_openai_key_value=${{ secrets.AZURE_OPENAI_KEY }}" >> $GITHUB_ENV  # Add this line
      
      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true
        run: |
          terraform init -var-file="${{ env.ENVIRONMENT }}.tfvars"
        working-directory: ./${{ env.ENVIRONMENT }}
  
      - name: Terraform Apply
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true  # Instruct Terraform to use OIDC-based auth
          TF_VAR_azure_openai_key: ${{ secrets.AZURE_OPENAI_KEY }}
          TF_LOG: DEBUG  # Enable detailed Terraform logging
          TF_LOG_PATH: terraform.log  # Path to save the log file within the working directory
        run: |
          echo "Using environment: ${{ env.ENVIRONMENT }}"
          terraform apply -var-file="${{ env.ENVIRONMENT }}.tfvars" -auto-approve
        working-directory: ./${{ env.ENVIRONMENT }}
      
      - name: Retrieve OpenAI Key from Key Vault
        working-directory: ./${{ env.ENVIRONMENT }}
        run: |      
          # Retrieve the secret value from Key Vault
          SECRET_VALUE=$(az keyvault secret show --name "${{ env.ENVIRONMENT }}-alpinebot-openai-key" --vault-name "${{ env.ENVIRONMENT }}-alpinebot-kv" --query "value" -o tsv)
      
          # Export the secret as an environment variable (avoid printing it)
          echo "SECRET_VALUE=${SECRET_VALUE}" >> $GITHUB_ENV
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
#     - name: Deploy Web Application
#       run: |
#         # Commands to build and deploy your web application
#         # Use $SECRET_VALUE as needed
#       env:
#         SECRET_VALUE: ${{ env.SECRET_VALUE }} 

      - name: Upload Terraform Log
        if: always()  # This forces the step to run regardless of the outcome of previous steps
        uses: actions/upload-artifact@v4
        with:
          name: terraform-log
          path: ./${{ env.ENVIRONMENT }}/terraform.log  # Path to the log file
          overwrite: true