name: Deploy to dev

on:
  push:
    branches:
      - dev

permissions:
  id-token: write  # Required for OIDC authentication
  contents: read   # Default permission for accessing the repo

jobs:
  # Step 1: Bootstrap Backend Resources (if not already done)
  backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    environment: dev # must match the federated credential "based on selection" \
    # and match Github Action Secrets name
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}             # App Registration client ID
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}             # Tenant ID
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} # Subscription ID
          allow-no-subscriptions: false
          enable-AzPSSession: false

      - name: Set Azure Subscription
        run:  |
          echo "Setting Azure Subscription to: ${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Output Active Azure Subscription Details
        run: |
          echo "Currently active Azure subscription:"
          az account show --output table
      
      - name: Create backend resources
        run: |
          # Define variables for the backend resources
          az_backend_rg_name="apbotbackend"
          az_backend_sa_name="apbotbackend"
          az_backend_container_name="apbotbackend"
          az_location="SwitzerlandNorth"

          # Re-set subscription context before resource group creation as additional safeguard
          echo "Setting Azure Subscription to: ${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          echo "Currently active Azure subscription:"
          az account show --output table

          # Create resource group if it doesn't exist
          az group create --name $az_backend_rg_name --location $az_location

          # Create storage account if it doesn't exist
          az storage account create \
            --name $az_backend_sa_name \
            --resource-group $az_backend_rg_name \
            --location $az_location \
            --sku Standard_LRS
          
          # Adding a small delay to ensure the storage account is fully provisioned
          sleep 30

          # Get the storage account key
          STORAGE_KEY=$(az storage account keys list --resource-group $az_backend_rg_name --account-name $az_backend_sa_name --query '[0].value' -o tsv)

          # Create storage container if it doesn't exist
          az storage container create \
            --name $az_backend_container_name \
            --account-name $az_backend_sa_name \
            --account-key $STORAGE_KEY
