name: Destroy Environment

on:
  workflow_dispatch:  # Allows manual trigger from the GitHub Actions UI

permissions:
  id-token: write  # Required for OIDC authentication
  contents: read   # Default permission for accessing the repo

jobs:
  destroy:
    name: Destroy Terraform Resources
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }} # Use the branch name as environment
    outputs:
      environment: ${{ steps.setenv.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Environment Variables Based on Branch
        id: set_env
        run: |
          # Extract the branch name (remove refs/heads/ from the full ref)
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Branch Name: $BRANCH_NAME"

          # Set environment based on branch
          if [[ "$BRANCH_NAME" == "dev" ]]; then
            ENVIRONMENT="dev"
          elif [[ "$BRANCH_NAME" == "qa" ]]; then
            ENVIRONMENT="qa"
          elif [[ "$BRANCH_NAME" == "main" ]]; then
            ENVIRONMENT="main"
          else
            echo "Unsupported branch: $BRANCH_NAME"
            exit 1
          fi

          # Export environment to be used in subsequent steps
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV

      - name: Login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: false
          enable-AzPSSession: false

      - name: Set Terraform Environment Variables
        run: |
          echo "TF_VAR_az_client_id=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_az_tenant_id=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_az_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_az_container_name=${{ env.ENVIRONMENT }}-bkd-alpinebot-co" >> $GITHUB_ENV

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: ./infra  # Use the new infra directory
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.ENVIRONMENT }}-bkd-alpinebot" \
            -backend-config="storage_account_name=${{ env.ENVIRONMENT }}bkdalpinebotsa" \
            -backend-config="container_name=${{ env.ENVIRONMENT }}-bkd-alpinebot-co" \
            -backend-config="key=${{ env.ENVIRONMENT }}-bkd-alpinebot.tfstate" \
            -var-file="${{ env.ENVIRONMENT }}.tfvars"

      - name: Terraform Destroy
        working-directory: ./infra  # Use the new infra directory
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true
          TF_LOG: DEBUG
          TF_LOG_PATH: terraform_destroy.log
        run: |
          terraform destroy -var-file="${{ env.ENVIRONMENT }}.tfvars" -auto-approve

      - name: Upload Terraform Destroy Log
        if: always()  # This ensures the step runs regardless of previous step outcomes
        uses: actions/upload-artifact@v4
        with:
          name: terraform-destroy-log
          path: ./infra/terraform_destroy.log  # Path updated to the infra directory

      - name: Cleanup Backend Resources
        run: |
          # Define variables for the backend resources
          az_backend_rg_name="${{ env.ENVIRONMENT }}-bkd-alpinebot"
          az_backend_sa_name="${{ env.ENVIRONMENT }}bkdalpinebotsa"
          az_backend_container_name="${{ env.ENVIRONMENT }}-bkd-alpinebot-co"

          # Delete the storage container
          az storage container delete \
            --name $az_backend_container_name \
            --account-name $az_backend_sa_name

          # Delete the storage account
          az storage account delete \
            --name $az_backend_sa_name \
            --resource-group $az_backend_rg_name \
            --yes

          # Delete the resource group
          az group delete --name $az_backend_rg_name --yes --no-wait
